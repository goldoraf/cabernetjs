(function(){window.Cabernet=Ember.Namespace.create({CURRENT_API_REVISION:1}),Handlebars.registerHelper("list",function(a,b){var c=b.fn,d="";if(a&&a.length>0)for(var e=0,f=a.length;e<f;e++)d+=c(a[e]);return d})})(),function(){Cabernet.Popover=Ember.View.extend({linkText:"",defaultLinkTemplate:'<a {{action "toggle"}}>{{linkText}}</a>',linkTemplate:null,contentTemplate:"",placement:"below",init:function(){return this.set("template",this.generateTemplate()),this._super()},toggle:function(a){a&&a.stopPropagation();var b=this.$("div.popover");b.toggle();if(b.is(":visible")){$("div.popover.active").removeClass("active").hide(),b.addClass("active");var c=this.getPositionParams(b);b.position({of:this.$("a"),my:c.my,at:c.at,offset:c.offset}),c.arrowLeft!==undefined&&b.children("div.arrow").css("left",c.arrowLeft),b.bind("clickoutside",function(a){$(this).removeClass("active").hide().unbind("clickoutside")})}else b.removeClass("active").hide().unbind("clickoutside")},generateTemplate:function(){var a=Ember.none(this.get("linkTemplate"))?this.get("defaultLinkTemplate"):this.get("linkTemplate"),b=this.get("placement");if(b=="below left"||b=="below right")b="below";else if(b=="above left"||b=="above right")b="above";return Ember.Handlebars.compile(a+'<div class="popover '+b+'">                 <div class="arrow"></div>                 <div class="inner">                     <div class="content">'+this.get("contentTemplate")+"</div>                 </div>             </div>")},getPositionParams:function(a){var b=a.css("width").replace(/px/,""),c={right:{my:"left",at:"right",offset:"0"},below:{my:"top",at:"bottom",offset:"0"},above:{my:"bottom",at:"center",offset:"0"},left:{my:"right",at:"left",offset:"0"},"below right":{my:"left top",at:"center bottom",offset:"0",arrowLeft:"20px"},"below left":{my:"right top",at:"right bottom",offset:"20 0",arrowLeft:b-20+"px"},"above right":{my:"left bottom",at:"center top",offset:"0",arrowLeft:"20px"}};return c[this.get("placement")]}})}(),function(){Ember.ENV.RAISE_ON_DEPRECATION=!1,Em.I18n!==undefined?Cabernet.translate=Em.I18n.t:Cabernet.translate=Ember.String.loc,Cabernet.Datagrid=Ember.View.extend({template:Ember.Handlebars.compile('{{#if emptyData}}             <div class="datagrid-empty"><p>{{emptyText}}</p></div>         {{else}}             <table>                 <thead>                     <tr>                         {{#each column in displayedColumns}}                             <th {{bindAttr class="column.sortClass"}}>                                 {{#if column.filterable}}                                     {{#if column.filter.isText}}                                         {{view Cabernet.Datagrid.TextFilterView filterBinding="column.filter"}}                                     {{/if}}                                     {{#if column.filter.isPick}}                                         {{view Cabernet.Datagrid.PickFilterView filterBinding="column.filter"}}                                     {{/if}}                                     {{#if column.filter.isRange}}                                         {{view Cabernet.Datagrid.RangeFilterView filterBinding="column.filter"}}                                     {{/if}}                                 {{/if}}                                 <a class="sortlink" {{action onSort context="column.name"}}>{{column.label}}</a>                             </th>                         {{/each}}                         <th>{{view Cabernet.Datagrid.Columnpicker columnsBinding="columnsForDisplay"}}</th>                     </tr>                 </thead>                 <tbody />             </table>         {{/if}}'),data:[],modelType:null,columns:null,custom:{},defaultSort:null,filtersText:"Filter by",emptyText:"No results found",sessionBucket:null,classNames:["datagrid"],columnsClassNames:{},displayedData:[],emptyData:function(){return this.get("displayedData").get("length")===0}.property("displayedData"),columnsForDisplay:function(){return this.expandColumnsDefinition()}.property().cacheable(),displayedColumns:function(){return this.get("columnsForDisplay").filterProperty("displayed")}.property("columnsForDisplay.@each.displayed"),filters:function(){return this.get("columnsForDisplay").mapProperty("filter")}.property("columnsForDisplay.@each.filter"),appliedFilters:function(){return this.get("filters").filter(function(a){return!Ember.empty(a.get("value"))})}.property("filters.@each.value"),appliedFiltersChanged:function(){console.log("appliedFiltersChanged"),this.applyFilters()}.observes("appliedFilters.@each"),init:function(){this._super(),this.addObserver("displayedColumns",function(){this.saveParam("displayedColumns",this.get("displayedColumns").mapProperty("name")),this.renderGrid()}),this.set("displayedData",this.get("data"));if(this.shouldPersistParams()){var a=this.retrieveParam("sort");Ember.none(a)||this.set("defaultSort",a)}this.applyDefaultSort(),this.addObserver("displayedData",function(){this.renderGrid()})},didInsertElement:function(){this.renderGrid()},renderGrid:function(){this.$("tbody").replaceWith(this.get("gridTemplate")({data:this.get("displayedData")}))},gridTemplate:function(){var a,b,c,d=[],e=this.get("columnsClassNames"),f=this.get("displayedColumns").get("length");return this.get("displayedColumns").forEach(function(g,h){a=this.getCustomDisplay(g.name),b=a!==null?a:"{{this."+g.name+"}}",c=e[g.name]!==undefined?' class="'+e[g.name]+'"':"",g.get("displayed")===!0&&d.push("<td"+c+(h===f-1?' colspan="2">':">")+b+"</td>")},this),Handlebars.compile("<tbody>{{#list data}}<tr>"+d.join("")+"</tr>{{/list}}</tbody>")}.property("displayedColumns").cacheable(),getCustomDisplay:function(a){return this.get("custom").hasOwnProperty(a)?this.get("custom")[a]:null},applyFilters:function(){var a=this.get("data");this.get("appliedFilters").forEach(function(b){a=b.apply(a)}),this.set("displayedData",a)},applyDefaultSort:function(){if(Ember.none(this.get("defaultSort")))return;var a=this.get("defaultSort"),b="up";a.indexOf("-")===0&&(b="down",a=a.substr(1)),this.sort(a,b)},onSort:function(a){this.sort(a.context)},sort:function(a,b){var c=this.get("columnsForDisplay").findProperty("name",a);if(b===undefined)var d=c.get("sort"),b=d==="down"?"up":"down";this.get("columnsForDisplay").setEach("sort",!1),c.set("sort",b);var e=this.get("displayedData").toArray().sort(function(b,c){var d,e,f=0;return d=Ember.get(b,a),e=Ember.get(c,a),f=Ember.compare(d,e),f});b==="down"&&e.reverse(),this.set("displayedData",e),this.shouldPersistParams()&&this.persistSort(a,b)},persistSort:function(a,b){this.saveParam("sort",b=="down"?"-"+a:a)},saveParam:function(a,b){sessionStorage.setItem(this.getSessionBucket(a),JSON.stringify(b))},retrieveParam:function(a){return JSON.parse(sessionStorage.getItem(this.getSessionBucket(a)))},getSessionBucket:function(a){return"cabernet.datagrid."+this.get("sessionBucket")+"."+a},shouldPersistParams:function(){return!Ember.none(this.get("sessionBucket"))},expandColumnsDefinition:function(){if(this.shouldPersistParams())var a=this.retrieveParam("displayedColumns");this.get("columns")===null&&this.set("columns",this.getColumnsFromModel());var b=[];return this.get("columns").forEach(function(c){var d=Ember.typeOf(c)=="string"?{name:c}:c;Ember.assert("Column objects must have a 'name' property",d.hasOwnProperty("name")),b.pushObject(Cabernet.Datagrid.Column.create({name:d.name,label:d.label!==undefined?d.label:Cabernet.translate(d.name),type:d.type!==undefined?d.type:String,displayed:Ember.none(a)?d.displayed!==undefined?d.displayed:!0:a.contains(d.name),sort:!1,filterable:d.filterable!==undefined?d.filterable:!0,filterType:d.filterType!==undefined?d.filterType:"text",filterValues:d.filterType==="pick"?this.getDistinctValues(d.name):null}))},this),b},getColumnsFromModel:function(){var a=[],b=this.get("modelType").__metadata__.definedProperties;for(var c in b)a.pushObject({name:c,type:b[c].type});return a},getDistinctValues:function(a){return this.get("data").mapProperty(a).uniq()}}),Cabernet.Datagrid.Column=Ember.Object.extend({name:"",label:"",type:String,displayed:!0,sort:!1,filterable:!0,filterType:"text",filterValues:null,filter:null,init:function(){this._super();switch(this.get("filterType")){case"pick":this.set("filter",Cabernet.Datagrid.PickFilter.create({column:this.get("name"),values:this.get("filterValues")}));break;case"range":this.set("filter",Cabernet.Datagrid.RangeFilter.create({column:this.get("name")}));break;default:this.set("filter",Cabernet.Datagrid.TextFilter.create({column:this.get("name")}))}},sortClass:function(){var a=this.get("sort");return a==="up"?"headerSortUp":a==="down"?"headerSortDown":""}.property("sort")}),Cabernet.Datagrid.Filter=Ember.Object.extend({column:"",applied:!1,value:"",isText:function(){return this.get("type")==="text"}.property("type"),isPick:function(){return this.get("type")==="pick"}.property("type"),isRange:function(){return this.get("type")==="range"}.property("type"),linkClass:function(){var a="filterlink";return this.get("applied")&&(a+=" active"),a}.property("applied")}),Cabernet.Datagrid.TextFilter=Cabernet.Datagrid.Filter.extend({type:"text",view:Cabernet.Datagrid.TextFilterView,apply:function(a){var b=new RegExp(this.get("value"),"i","g");return a.filter(function(a){return(a instanceof Ember.Object?a.get(this.get("column")):a[this.get("column")]).toString().match(b)},this)}}),Cabernet.Datagrid.PickFilter=Cabernet.Datagrid.Filter.extend({type:"pick",view:Cabernet.Datagrid.PickFilterView,apply:function(a){var b;return a.filter(function(a){return b=(a instanceof Ember.Object?a.get(this.get("column")):a[this.get("column")]).toString(),this.get("value").contains(b)},this)}}),Cabernet.Datagrid.RangeFilter=Cabernet.Datagrid.Filter.extend({type:"range",view:Cabernet.Datagrid.RangeFilterView,max:function(){return Ember.empty(this.get("value"))?null:this.get("value")[1]}.property("value"),min:function(){return Ember.empty(this.get("value"))?null:this.get("value")[0]}.property("value"),apply:function(a){var b,c=this.get("value")[0],d=this.get("value")[1];return a.filter(function(a){return b=(a instanceof Ember.Object?a.get(this.get("column")):a[this.get("column")]).toString(),b>=c&&b<=d},this)}}),Cabernet.Datagrid.FilterView=Cabernet.Popover.extend({classNames:["filter"],placement:"below",linkTemplate:'<a {{bindAttr class="filter.linkClass"}} {{action "toggle"}}>U</a>'}),Cabernet.Datagrid.PickFilterView=Cabernet.Datagrid.FilterView.extend({contentTemplate:'<ul class="inputs-list">                         {{#each distinctValues}}                             <li>                                 <label>                                   {{view Ember.Checkbox checkedBinding="checked"}}                                   {{value}}                                 </label>                             </li>                         {{/each}}                       </ul>',distinctValues:function(){var a=[];return this.get("filter").get("values").forEach(function(b){a.pushObject(Ember.Object.create({value:b,checked:!0}))}),a}.property().cacheable(),didInsertElement:function(){this.addObserver("distinctValues.@each.checked",function a(){var a=this.get("distinctValues").filterProperty("checked").mapProperty("value");this.get("filter").set("value",a).set("applied",!0)})}}),Cabernet.Datagrid.RangeFilterView=Cabernet.Datagrid.FilterView.extend({contentTemplate:'<p>From {{filter.min}} to {{filter.max}}</p><div class="slider-range"></div>',applyFilter:function(a){this.get("filter").set("value",a).set("applied",!0)},didInsertElement:function(){var a=this;this.$("div.slider-range").slider({range:!0,min:0,max:200,values:[0,200],step:6,slide:function(b,c){a.get("filter").set("value",c.values).set("applied",!0)}})}}),Cabernet.Datagrid.TextFilterView=Cabernet.Datagrid.FilterView.extend({contentTemplate:"{{view Cabernet.Datagrid.FilterTextField}}",applyFilter:function(a){this.get("filter").set("value",a).set("applied",!0)},toggle:function(a){this._super(a);var b=this.$("input");b.is(":visible")&&b.focus()}}),Cabernet.Datagrid.FilterTextField=Ember.TextField.extend({insertNewline:function(){this.get("parentView").applyFilter(this.get("value"))}}),Cabernet.Datagrid.Columnpicker=Cabernet.Popover.extend({classNames:["columnpicker"],placement:"below left",linkTemplate:'<a class="toggle" {{action "toggle"}}>Select columns</a>',contentTemplate:'{{view Ember.CollectionView tagName="ul" class="inputs-list"                         itemViewClass="Cabernet.Datagrid.Columnpicker.Element" contentBinding="columns"}}'}),Cabernet.Datagrid.Columnpicker.Element=Ember.View.extend({template:Ember.Handlebars.compile('<label>             {{view Ember.Checkbox checkedBinding="content.displayed"}}             <span>{{content.label}}</span>         </label>')})}(),function(){}()